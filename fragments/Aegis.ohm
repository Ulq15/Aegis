Aegis {
  Program         = classKey id ":" ClassBody* endKey                                --declare
  ClassBody       = Declaration
                  | Statement
  Declaration     = VarDec ";"                                                       --var
                  | FunDec                                                           --func
  VarDec          = TypeExp Assignment                                               --initialize
                  | TypeExp id                                                       --declare
                  | FunCall                                                          --funCall              
  Assignment      = id "{" Comparand "}" "=" Exp                                     --array
                  | id addKey "[" Exp "][" Exp "]"                                   --dictAdd
                  | id "=" FunCall                                                   --funCall
                  | id "=" Exp                                                       --assign
  FunDec          = id "(" ListOf<Param, ","> ")" TypeExp ":" Body endKey            --declare
  Param           = TypeExp id                                                       --single
  Body            = Statement*
  Statement       = Conditional 
                  | DoLoop
                  | Loop
                  | Assignment ";"                                                   --assign       
                  | returnKey Exp ";"                                                --return
                  | printKey "(" Exp ")" ";"                                         --print
                  | Declaration
                  | Exp ";"                                                          --expLine
  FunCall         = id "(" ListOf<Exp, ","> ")"                                      --call
  Exp             = Exp (logicop Formula)*                                           --logic
                  | Formula
  Formula         = Formula (compareOp Comparand)*                                   --compare
                  | Comparand
  Comparand       = Comparand (addop Term)*                                          --arithmetic
                  | Term
  Term            = Term (multop Factor)*                                            --multiOp
                  | Factor
  Factor          = Factor (exponentop Primary)*                                     --exponent
                  | Primary                                                        
  Primary         = Primary crementOp                                                --postfix
                  | crementOp Primary                                                --prefix
                  | negateOp Primary                                                 --negate
                  | FunCall
                  | "{" ListOf<Exp, ","> "}"                                         --arrayLiteral
                  | id "{" Comparand "}"                                             --accessArray
                  | id getKey "[" Exp "]"                                            --getDictionary
                  | "(" Exp ")"                                                      --parens
                  | id                                                               --id
                  | literal                                                          --literal
  Conditional     = If ElseIf* Else? endKey               
  If              = "IF" "(" Exp ")" ":" Body                
  ElseIf          = "ELSEIF" "(" Exp ")" ":" Body         
  Else            = "ELSE" ":" Body                          
  DoLoop          = "DO" "(" Assignment "," Exp "," Exp ")" ":" Body endKey          --assign
                  | "DO" "(" VarDec "," Exp "," Exp ")" ":" Body endKey              --declare
  Loop            = "LOOP" "(" Exp ")" ":" Body endKey                               --statement
  int             = digit+
  decimal         = digit+ ("." digit+)
  negative        = "-" (int | decimal)
  true            = "TRUE" ~alnum
  false           = "FALSE" ~alnum
  char            = alnum
                  | space
  stringLiteral   = "\"" char* "\""
  literal         = negative | decimal | int | true | false | stringLiteral
  logicop         = "&" | "|"
  compareOp       = "==" | "!=" | ">=" | "<=" | "<" | ">" 
  negateOp        = "!"
  addop           = "+" | "-" 
  multop          = "*" | "/" | moduloKey
  exponentop      = "**"
  crementOp       = "++" | "--"
  numType         = "NUM"
  decimalType     = "DECI"
  booleanType     = "BOOL"
  charsType       = "CHARS"
  voidType        = "VOID"
  TypeExp         = TypeExp "{" "}"                                                  --array
                  | "[" TypeExp "]" "[" TypeExp "]"                                  --dictionary
                  | numType                                                          --numType
                  | decimalType                                                      --deciType
                  | booleanType                                                      --boolType
                  | charsType                                                        --charsType
                  | voidType                                                         --voidType
  moduloKey       = "MOD"
  conditionalKey  = "IF" | "ELSE" | "ELSEIF"
  loopKey         = "LOOP" | "DO"
  printKey        = "OUTPUT"
  endKey          = "END"
  returnKey       = "RETURN"
  classKey        = "CLASS"
  addKey          = "ADD"
  getKey          = "GET"
  keyword         = conditionalKey
                  | loopKey
                  | printKey
                  | endKey
                  | returnKey
                  | moduloKey
                  | classKey
                  | true
                  | false
                  | numType
                  | decimalType
                  | booleanType
                  | charsType
                  | voidType
                  | addKey
                  | getKey
  id              = ~keyword letter alnum*
  space          += "##" (~"\n" any)* ("\n" | end)                                   --singleLineComment
                  | "#*" (~"*#" any)* ("*#" | end)                                   --multiLineComment
}