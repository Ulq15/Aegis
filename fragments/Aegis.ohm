Aegis {
  Program         = classKey id ":" ClassBody endKey
  ClassBody       = Declaration*
  Declaration     = VarDec 
                  | FunDec
  VarDec          = TypeExp id "=" Exp                                          --declaration
                  | id "=" Exp                                                   --assign
  FunDec          = id "(" (TypeExp id ("," TypeExp id)*)? ")" TypeExp? ":" Body endKey               --declaration
  Body            = Statement*                                             
  Statement       = Conditional 
                  | Loop
                  | returnKey Exp                                                                        --return
                  | printKey Parens                                                               --print        
                  | Declaration
                  | Call
  Call            = id "("(Exp(","Exp)*)? ")"                                                  --call                                                    
  Exp             = Formula (logicop Formula)+
  Formula         = Comperand (compareOp Comperand)+ 
  Comperand       = Term (addop Term)*
  Term            = Factor (multop Factor)*
  Factor          = Primary (exponentop Primary)*                                                               --exponent
  Primary         = Primary crementOp                             --postfix
                  | crementOp Primary                             --prefix
                  | negateOp Primary                              --negate
                  | "{" (Exp ("," Exp)*)? "}"                     --array
                  | id "{" Comperand "}"                          --indexing
                  | DictionaryOp
                  | "(" Exp ")"                                   --parens
                  | literal
                  | id
  DictionaryOp    = id "ADD[" Exp "][" Exp "]"                                                          --addToDictionary
                  | id "GET[" Exp "]"                                                                   --getFromDictionary
  Conditional     = "IF" "(" Logic "):" Body ("ELSEIF" "(" Logic "):" Body)* ("ELSE:" Body)? endKey      --condition
  Loop            = "DO" "(" numType? id ("=" int)? "," Logic "," Exp "):" Body endKey                   --stepByStepBased
                  | "LOOP" "(" Logic "):" Body endKey                                                    --statementBased
  crementOp       = "++" | "--"
  int             = digit+
  decimal         = digit+ ("." digit+)
  num             = decimal | int
  boolean         = "TRUE" | "FALSE"
  char            = alnum
                  | space        
  stringLiteral   = "\"" char* "\""
  literal         = num | boolean | stringLiteral
  logicop         = "&" | "|"
  compareOp       = "==" | "!=" | ">=" | "<=" | "<" | ">" 
  negateOp        = "!"
  addop           = "+" | "-"
  multop          = "*" | "/"
  exponentop      = "**"
  numType         = "NUM"
  decimalType     = "DECI"
  booleanType     = "BOOL"
  stringType      = "CHARS"
  TypeExp         = ArrayType | DictionaryType | numType | decimalType | booleanType | stringType 
  ArrayType       = TypeExp "{" Comperand? "}" 
  DictionaryType  = "[" TypeExp "][" TypeExp "]" 
  moduloKey       = "MOD"
  conditionalKey  = "IF" | "ELSE" | "ELSEIF"
  loopKey         = "LOOP" | "DO"
  printKey        = "OUTPUT"
  endKey          = "END"
  returnKey       = "RETURN"
  classKey        = "CLASS"
  keyword         = TypeExp
                  | conditionalKey
                  | loopKey
                  | printKey
                  | endKey
                  | returnKey
                  | moduloKey
                  | classKey
  id              = ~keyword letter alnum*
  space          += "##" (~"\n" any)* ("\n" | end)                                                       --singleLineComment
                  | "#*" (~"*#" any)* ("*#" | end)                                                       --multiLineComment
}