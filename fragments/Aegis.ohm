Aegis {
  Program         = classKey id ":" ClassBody endKey
  ClassBody       = Declaration*
  Declaration     = VarDec ";"                                                                           --linebreak                                                                         
                  | FunDec
  VarDec          = TypeExp id ("=" Exp)?                                                                --declaration
                  | id (ArrayOp | DictionaryOp)? "=" Exp                                                                           --assign
  FunDec          = id "(" (TypeExp id ("," TypeExp id)*)? ")" TypeExp? ":" Body endKey                  --declaration
  Body            = Statement*                                             
  Statement       = Conditional 
                  | Loop
                  | returnKey Exp ";"                                                                    --return
                  | printKey "(" Exp ")" ";"                                                             --print        
                  | Declaration
                  | Exp ";"                                                                              --linebreak
                  | FunCall
  FunCall         = id "("(Exp(","Exp)*)? ")"                                                            --FunCall                                                    
  Exp             = Formula (logicop Formula)*
  Formula         = Comperand (compareOp Comperand)* 
  Comperand       = Term (addop Term)*
  Term            = Factor (multop Factor)*
  Factor          = Primary (exponentop Primary)*                                                        --exponent
  Primary         = Primary crementOp                                                                    --postfix
                  | crementOp Primary                                                                    --prefix
                  | negateOp Primary                                                                     --negate
                  | "{" (Exp ("," Exp)*)? "}"                                                            --array
                  | id ArrayOp                                                                           --accessArray
                  | id DictionaryOp                                                                      --accessDictionary
                  | "(" Exp ")"                                                                          --parens
                  | id
                  | literal
  ArrayOp         = "{" Comperand "}"                                                                    --indexing
  DictionaryOp    = "ADD[" Exp "][" Exp "]"                                                              --addToDictionary
                  | "GET[" Exp "]"                                                                       --getFromDictionary
  Conditional     = "IF" "(" Exp "):" Body ("ELSEIF" "(" Exp "):" Body)* ("ELSE:" Body)? endKey          --condition
  Loop            = "DO" "(" VarDec "," Exp "," Exp "):" Body endKey                                     --stepByStepBased
                  | "LOOP" "(" Exp "):" Body endKey                                                      --statementBased
  crementOp       = "++" | "--"
  int             = digit+
  decimal         = digit+ ("." digit+)
  num             = decimal | int
  boolean         = "TRUE" | "FALSE"
  char            = alnum
                  | space        
  stringLiteral   = "\"" char* "\""
  literal         = num | boolean | stringLiteral
  logicop         = "&" | "|"
  compareOp       = "==" | "!=" | ">=" | "<=" | "<" | ">" 
  negateOp        = "!"
  addop           = "+" | "-" 
  multop          = "*" | "/" | moduloKey
  exponentop      = "**"
  numType         = "NUM"
  decimalType     = "DECI"
  booleanType     = "BOOL"
  stringType      = "CHARS"
  TypeExp         = ArrayType | DictionaryType | literalType
  literalType     = numType | decimalType | booleanType | stringType
  ArrayType       = TypeExp "{" Comperand? "}" 
  DictionaryType  = "[" TypeExp "][" TypeExp "]" 
  moduloKey       = "MOD"
  conditionalKey  = "IF" | "ELSE" | "ELSEIF"
  loopKey         = "LOOP" | "DO"
  printKey        = "OUTPUT"
  endKey          = "END"
  returnKey       = "RETURN"
  classKey        = "CLASS"
  keyword         = literalType
                  | conditionalKey
                  | loopKey
                  | printKey
                  | endKey
                  | returnKey
                  | moduloKey
                  | classKey
  id              = ~keyword letter alnum*
  space          += "##" (~"\n" any)* ("\n" | end)                                                       --singleLineComment
                  | "#*" (~"*#" any)* ("*#" | end)                                                       --multiLineComment
}